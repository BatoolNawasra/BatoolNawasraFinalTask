import DataTable from "./data_table";
import { IHookBody, IStepHookBody, IParameterTypeDefinition, IStepDefinitionBody } from "./public-member-types";
export { resolve as resolvePreprocessorConfiguration, IPreprocessorConfiguration, } from "./preprocessor-configuration";
export { addCucumberPreprocessorPlugin } from "./add-cucumber-preprocessor-plugin";
export { beforeRunHandler, afterRunHandler, beforeSpecHandler, afterSpecHandler, afterScreenshotHandler, } from "./plugin-event-handlers";
export declare function isFeature(): boolean;
export declare function doesFeatureMatch(expression: string): boolean;
export declare function defineStep<T extends unknown[], C extends Mocha.Context>(description: string | RegExp, implementation: IStepDefinitionBody<T, C>): void;
export { defineStep as Given, defineStep as When, defineStep as Then };
export declare function Step(world: Mocha.Context, text: string, argument?: DataTable | string): void;
export declare function defineParameterType<T, C extends Mocha.Context>(options: IParameterTypeDefinition<T, C>): void;
export declare function attach(data: string | ArrayBuffer, mediaType?: string): void;
export declare function Before(options: {
    tags?: string;
}, fn: IHookBody): void;
export declare function Before(fn: IHookBody): void;
export declare function After(options: {
    tags?: string;
}, fn: IHookBody): void;
export declare function After(fn: IHookBody): void;
export declare function BeforeStep(options: {
    tags?: string;
}, fn: IStepHookBody): void;
export declare function BeforeStep(fn: IStepHookBody): void;
export declare function AfterStep(options: {
    tags?: string;
}, fn: IStepHookBody): void;
export declare function AfterStep(fn: IStepHookBody): void;
export { default as DataTable } from "./data_table";
