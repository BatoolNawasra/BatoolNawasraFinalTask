"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSnippet = exports.getFunctionName = void 0;
const messages = __importStar(require("@cucumber/messages"));
const TEMPLATE = `
[function]("[definition]", function ([arguments]) {
  return "pending";
});
`.trim();
function getFunctionName(type) {
    switch (type) {
        case messages.PickleStepType.CONTEXT:
            return "Given";
        case messages.PickleStepType.ACTION:
            return "When";
        case messages.PickleStepType.OUTCOME:
            return "Then";
        case messages.PickleStepType.UNKNOWN:
            return "Given";
    }
}
exports.getFunctionName = getFunctionName;
function generateSnippet(expression, type, parameter) {
    const definition = expression.source
        .replace(/\\/g, "\\\\")
        .replace(/"/g, '\\"');
    const stepParameterNames = parameter ? [parameter] : [];
    const args = expression.parameterNames.concat(stepParameterNames).join(", ");
    return TEMPLATE.replace("[function]", getFunctionName(type))
        .replace("[definition]", definition)
        .replace("[arguments]", args);
}
exports.generateSnippet = generateSnippet;
