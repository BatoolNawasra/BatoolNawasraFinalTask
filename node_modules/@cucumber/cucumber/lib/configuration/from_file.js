"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromFile = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const node_util_1 = require("node:util");
const node_url_1 = require("node:url");
const string_argv_1 = __importDefault(require("string-argv"));
const yaml_1 = __importDefault(require("yaml"));
const read_pkg_up_1 = __importDefault(require("read-pkg-up"));
const merge_configurations_1 = require("./merge_configurations");
const argv_parser_1 = __importDefault(require("./argv_parser"));
const check_schema_1 = require("./check_schema");
async function fromFile(logger, cwd, file, profiles = []) {
    const definitions = await loadFile(logger, cwd, file);
    if (!definitions.default) {
        logger.debug('No default profile defined in configuration file');
        definitions.default = {};
    }
    if (profiles.length < 1) {
        logger.debug('No profiles specified; using default profile');
        profiles = ['default'];
    }
    const definedKeys = Object.keys(definitions);
    profiles.forEach((profileKey) => {
        if (!definedKeys.includes(profileKey)) {
            throw new Error(`Requested profile "${profileKey}" doesn't exist`);
        }
    });
    return (0, merge_configurations_1.mergeConfigurations)({}, ...profiles.map((profileKey) => extractConfiguration(logger, profileKey, definitions[profileKey])));
}
exports.fromFile = fromFile;
async function loadFile(logger, cwd, file) {
    const filePath = node_path_1.default.join(cwd, file);
    const extension = node_path_1.default.extname(filePath);
    let definitions;
    switch (extension) {
        case '.json':
            definitions = JSON.parse(await (0, node_util_1.promisify)(node_fs_1.default.readFile)(filePath, { encoding: 'utf-8' }));
            break;
        case '.yaml':
        case '.yml':
            definitions = yaml_1.default.parse(await (0, node_util_1.promisify)(node_fs_1.default.readFile)(filePath, { encoding: 'utf-8' }));
            break;
        case '.cjs':
            logger.debug(`Loading configuration file "${file}" as CommonJS based on extension`);
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            definitions = require(filePath);
            break;
        case '.mjs':
            logger.debug(`Loading configuration file "${file}" as ESM based on extension`);
            definitions = await import((0, node_url_1.pathToFileURL)(filePath).toString());
            break;
        case '.js':
            {
                const parentPackage = await readPackageJson(filePath);
                if (!parentPackage) {
                    logger.debug(`Loading configuration file "${file}" as CommonJS based on absence of a parent package`);
                    // eslint-disable-next-line @typescript-eslint/no-var-requires
                    definitions = require(filePath);
                }
                else if (parentPackage.type === 'module') {
                    logger.debug(`Loading configuration file "${file}" as ESM based on "${parentPackage.name}" package type`);
                    definitions = await import((0, node_url_1.pathToFileURL)(filePath).toString());
                }
                else {
                    logger.debug(`Loading configuration file "${file}" as CommonJS based on "${parentPackage.name}" package type`);
                    // eslint-disable-next-line @typescript-eslint/no-var-requires
                    definitions = require(filePath);
                }
            }
            break;
        default:
            throw new Error(`Unsupported configuration file extension "${extension}"`);
    }
    if (typeof definitions !== 'object') {
        throw new Error(`Configuration file ${filePath} does not export an object`);
    }
    return definitions;
}
async function readPackageJson(filePath) {
    const parentPackage = await (0, read_pkg_up_1.default)({ cwd: node_path_1.default.dirname(filePath) });
    return parentPackage?.packageJson;
}
function extractConfiguration(logger, name, definition) {
    if (typeof definition === 'string') {
        logger.debug(`Profile "${name}" value is a string; parsing as argv`);
        const { configuration } = argv_parser_1.default.parse([
            'node',
            'cucumber-js',
            ...(0, string_argv_1.default)(definition),
        ]);
        return configuration;
    }
    try {
        return (0, check_schema_1.checkSchema)(definition);
    }
    catch (error) {
        throw new Error(`Requested profile "${name}" failed schema validation: ${error.errors.join(' ')}`);
    }
}
//# sourceMappingURL=from_file.js.map