{"version":3,"file":"from_file.js","sourceRoot":"","sources":["../../src/configuration/from_file.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'node:fs'\nimport path from 'node:path'\nimport { promisify } from 'node:util'\nimport { pathToFileURL } from 'node:url'\nimport stringArgv from 'string-argv'\nimport YAML from 'yaml'\nimport readPkgUp from 'read-pkg-up'\nimport { ILogger } from '../logger'\nimport { IConfiguration } from './types'\nimport { mergeConfigurations } from './merge_configurations'\nimport ArgvParser from './argv_parser'\nimport { checkSchema } from './check_schema'\n\nexport async function fromFile(\n  logger: ILogger,\n  cwd: string,\n  file: string,\n  profiles: string[] = []\n): Promise<Partial<IConfiguration>> {\n  const definitions = await loadFile(logger, cwd, file)\n  if (!definitions.default) {\n    logger.debug('No default profile defined in configuration file')\n    definitions.default = {}\n  }\n  if (profiles.length < 1) {\n    logger.debug('No profiles specified; using default profile')\n    profiles = ['default']\n  }\n  const definedKeys = Object.keys(definitions)\n  profiles.forEach((profileKey) => {\n    if (!definedKeys.includes(profileKey)) {\n      throw new Error(`Requested profile \"${profileKey}\" doesn't exist`)\n    }\n  })\n  return mergeConfigurations(\n    {},\n    ...profiles.map((profileKey) =>\n      extractConfiguration(logger, profileKey, definitions[profileKey])\n    )\n  )\n}\n\nasync function loadFile(\n  logger: ILogger,\n  cwd: string,\n  file: string\n): Promise<Record<string, any>> {\n  const filePath: string = path.join(cwd, file)\n  const extension = path.extname(filePath)\n  let definitions\n  switch (extension) {\n    case '.json':\n      definitions = JSON.parse(\n        await promisify(fs.readFile)(filePath, { encoding: 'utf-8' })\n      )\n      break\n    case '.yaml':\n    case '.yml':\n      definitions = YAML.parse(\n        await promisify(fs.readFile)(filePath, { encoding: 'utf-8' })\n      )\n      break\n    case '.cjs':\n      logger.debug(\n        `Loading configuration file \"${file}\" as CommonJS based on extension`\n      )\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      definitions = require(filePath)\n      break\n    case '.mjs':\n      logger.debug(\n        `Loading configuration file \"${file}\" as ESM based on extension`\n      )\n      definitions = await import(pathToFileURL(filePath).toString())\n      break\n    case '.js':\n      {\n        const parentPackage = await readPackageJson(filePath)\n        if (!parentPackage) {\n          logger.debug(\n            `Loading configuration file \"${file}\" as CommonJS based on absence of a parent package`\n          )\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\n          definitions = require(filePath)\n        } else if (parentPackage.type === 'module') {\n          logger.debug(\n            `Loading configuration file \"${file}\" as ESM based on \"${parentPackage.name}\" package type`\n          )\n          definitions = await import(pathToFileURL(filePath).toString())\n        } else {\n          logger.debug(\n            `Loading configuration file \"${file}\" as CommonJS based on \"${parentPackage.name}\" package type`\n          )\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\n          definitions = require(filePath)\n        }\n      }\n      break\n    default:\n      throw new Error(`Unsupported configuration file extension \"${extension}\"`)\n  }\n  if (typeof definitions !== 'object') {\n    throw new Error(`Configuration file ${filePath} does not export an object`)\n  }\n  return definitions\n}\n\nasync function readPackageJson(filePath: string) {\n  const parentPackage = await readPkgUp({ cwd: path.dirname(filePath) })\n  return parentPackage?.packageJson\n}\n\nfunction extractConfiguration(\n  logger: ILogger,\n  name: string,\n  definition: any\n): Partial<IConfiguration> {\n  if (typeof definition === 'string') {\n    logger.debug(`Profile \"${name}\" value is a string; parsing as argv`)\n    const { configuration } = ArgvParser.parse([\n      'node',\n      'cucumber-js',\n      ...stringArgv(definition),\n    ])\n    return configuration\n  }\n  try {\n    return checkSchema(definition)\n  } catch (error) {\n    throw new Error(\n      `Requested profile \"${name}\" failed schema validation: ${error.errors.join(\n        ' '\n      )}`\n    )\n  }\n}\n"]}